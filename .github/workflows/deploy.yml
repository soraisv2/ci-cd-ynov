name: Build, Test and Deploy React Application

on:
  push:
    branches: [ master ]
  repository_dispatch:
    types: [dispatch-event]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.x', '21.x']
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test:coverage
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          flags: unittests-node:${{ matrix.node-version }}
          token: ${{ secrets.CODECOV_TOKEN }}
          
  build_test:
    permissions:
      contents: write
      pull-requests: write
    strategy:
      matrix:
        node-version: ['20.x', '21.x']
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'
      - name: npm ci and test
        run: |
          npm ci
          npm run jsdoc
          npm run build --if-present  
        env: 
          REACT_APP_SERVER_URL: ${{ secrets.REACT_APP_SERVER_URL }}
      - name: Build the stack react
        run: |
          docker compose --version
          docker compose up -d
        env: 
          REACT_APP_SERVER_URL: ${{ secrets.REACT_APP_SERVER_URL }}
      - name: Run e2e tests with cypress 
        uses: cypress-io/github-action@v6
      - name: Stop the stack react
        run: docker compose down
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Build and docs
        run: |
          npm run jsdoc
          npm run build --if-present
        env: 
          REACT_APP_SERVER_URL: ${{ secrets.REACT_APP_SERVER_URL }}
      - name: Authenticate with npm
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.CI_CD_YNOV_VSORAIS_NPM }}" > ~/.npmrc
      - name: Check version
        run: |
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          NPM_VERSION=$(npm view ci-cd-ynov version)
          if [ "$LOCAL_VERSION" != "$NPM_VERSION" ]; then
            echo "NEW_VERSION=true" >> $GITHUB_ENV
          else
            echo "NEW_VERSION=false" >> $GITHUB_ENV
          fi
      - name: Build and publish package on NPM ðŸ“¦
        if: env.NEW_VERSION == 'true'
        run: |
          git config --global user.email "soraisv2@gmail.com"
          git config --global user.name "soraisv2"
          npm run build-npm
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.CI_CD_YNOV_VSORAIS_NPM }}
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build
          # if-no-files-found: error

  deploy:
    needs: build_test
    environment:
      name: github-pages
      url: ${{steps.deployment.outputs.page_url}}
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to github pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: build.21.x